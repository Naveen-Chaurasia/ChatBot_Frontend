{"ast":null,"code":"import axios from 'axios';\n\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.handleJavascriptList = () => {\n      const message = this.createChatBotMessage(\"Fantastic, I've got the following resources for you on Javascript:\", {\n        widget: \"javascriptLinks\"\n      });\n      this.updateChatbotState(message);\n    };\n\n    this.handleSpringbootList = () => {\n      const message = this.createChatBotMessage(\"Fantastic, I've got the following resources for you on Springboot\", {\n        widget: \"SpringbootLinks\"\n      });\n      this.updateChatbotState(message);\n    };\n\n    this.fetchApiMessage = message => {\n      //const response =  axios.get('http://127.0.0.1:5000/chat?message=who is matt asay?');\n      const response = axios.get('http://127.0.0.1:5000/chat?message=' + message); //const data =  response.json();  \n\n      this.updateChatbotState(response);\n    };\n\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  } // new method\n\n\n  greet() {\n    const greetingMessage = this.createChatBotMessage(\"Hi, friend.\");\n    this.updateChatbotState(greetingMessage);\n  }\n\n  ujjwalFunction() {\n    const ujjwalmsg = this.createChatBotMessage(\"asdkjfhkjasdgfkjgDFJS\");\n    this.updateChatbotState(ujjwalmsg);\n  }\n\n  updateChatbotState(message) {\n    // NOTICE: This function is set in the constructor, and is passed in from the top level Chatbot component. The setState function here actually manipulates the top level state of the Chatbot, so it's important that we make sure that we preserve the previous state.\n    this.setState(prevState => ({ ...prevState,\n      messages: [...prevState.messages, message]\n    }));\n  }\n\n}\n\nexport default ActionProvider;","map":{"version":3,"sources":["D:/javae/ChatBot_Frontend/chatbot-frontend/src/ActionProvider.js"],"names":["axios","ActionProvider","constructor","createChatBotMessage","setStateFunc","handleJavascriptList","message","widget","updateChatbotState","handleSpringbootList","fetchApiMessage","response","get","setState","greet","greetingMessage","ujjwalFunction","ujjwalmsg","prevState","messages"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,cAAN,CAAqB;AACjBC,EAAAA,WAAW,CAACC,oBAAD,EAAuBC,YAAvB,EAAqC;AAAA,SAiBhDC,oBAjBgD,GAiBzB,MAAM;AAC3B,YAAMC,OAAO,GAAG,KAAKH,oBAAL,CACd,oEADc,EAEd;AACEI,QAAAA,MAAM,EAAE;AADV,OAFc,CAAhB;AAOA,WAAKC,kBAAL,CAAwBF,OAAxB;AACD,KA1B+C;;AAAA,SA4BhDG,oBA5BgD,GA4BzB,MAAM;AAC3B,YAAMH,OAAO,GAAC,KAAKH,oBAAL,CACZ,mEADY,EAEZ;AACEI,QAAAA,MAAM,EAAC;AADT,OAFY,CAAd;AAOA,WAAKC,kBAAL,CAAwBF,OAAxB;AACD,KArC+C;;AAAA,SA0CjDI,eA1CiD,GA0ChCJ,OAAD,IAChB;AAEC;AACA,YAAMK,QAAQ,GAAIX,KAAK,CAACY,GAAN,CAAU,wCAAsCN,OAAhD,CAAlB,CAHD,CAIC;;AACA,WAAKE,kBAAL,CAAwBG,QAAxB;AAGA,KAnDgD;;AAC9C,SAAKR,oBAAL,GAA4BA,oBAA5B;AACA,SAAKU,QAAL,GAAgBT,YAAhB;AACD,GAJgB,CAMjB;;;AACAU,EAAAA,KAAK,GAAG;AACN,UAAMC,eAAe,GAAG,KAAKZ,oBAAL,CAA0B,aAA1B,CAAxB;AACA,SAAKK,kBAAL,CAAwBO,eAAxB;AACD;;AAEDC,EAAAA,cAAc,GACd;AACE,UAAMC,SAAS,GAAC,KAAKd,oBAAL,CAA0B,uBAA1B,CAAhB;AACA,SAAKK,kBAAL,CAAwBS,SAAxB;AACD;;AA4CDT,EAAAA,kBAAkB,CAACF,OAAD,EAAU;AAC1B;AAEA,SAAKO,QAAL,CAAeK,SAAD,KAAgB,EAC5B,GAAGA,SADyB;AAE5BC,MAAAA,QAAQ,EAAE,CAAC,GAAGD,SAAS,CAACC,QAAd,EAAwBb,OAAxB;AAFkB,KAAhB,CAAd;AAID;;AAnEgB;;AAsEnB,eAAeL,cAAf","sourcesContent":["import axios from 'axios';\r\n\r\nclass ActionProvider {\r\n    constructor(createChatBotMessage, setStateFunc) {\r\n      this.createChatBotMessage = createChatBotMessage;\r\n      this.setState = setStateFunc;\r\n    }\r\n  \r\n    // new method\r\n    greet() {\r\n      const greetingMessage = this.createChatBotMessage(\"Hi, friend.\");\r\n      this.updateChatbotState(greetingMessage);\r\n    }\r\n\r\n    ujjwalFunction()\r\n    {\r\n      const ujjwalmsg=this.createChatBotMessage(\"asdkjfhkjasdgfkjgDFJS\");\r\n      this.updateChatbotState(ujjwalmsg);\r\n    }\r\n  \r\n    handleJavascriptList = () => {\r\n      const message = this.createChatBotMessage(\r\n        \"Fantastic, I've got the following resources for you on Javascript:\",\r\n        {\r\n          widget: \"javascriptLinks\",\r\n        }\r\n      );\r\n  \r\n      this.updateChatbotState(message);\r\n    }\r\n\r\n    handleSpringbootList = () => {\r\n      const message=this.createChatBotMessage(\r\n        \"Fantastic, I've got the following resources for you on Springboot\",\r\n        {\r\n          widget:\"SpringbootLinks\",\r\n        }\r\n      );\r\n\r\n      this.updateChatbotState(message);\r\n    };\r\n\r\n\r\n\r\n\r\n   fetchApiMessage=(message)=>\r\n   {\r\n\r\n    //const response =  axios.get('http://127.0.0.1:5000/chat?message=who is matt asay?');\r\n    const response =  axios.get('http://127.0.0.1:5000/chat?message='+message);\r\n    //const data =  response.json();  \r\n    this.updateChatbotState(response);  \r\n\r\n    \r\n   };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    updateChatbotState(message) {\r\n      // NOTICE: This function is set in the constructor, and is passed in from the top level Chatbot component. The setState function here actually manipulates the top level state of the Chatbot, so it's important that we make sure that we preserve the previous state.\r\n  \r\n      this.setState((prevState) => ({\r\n        ...prevState,\r\n        messages: [...prevState.messages, message],\r\n      }));\r\n    }\r\n  }\r\n  \r\n  export default ActionProvider;"]},"metadata":{},"sourceType":"module"}