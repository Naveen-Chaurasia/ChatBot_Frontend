{"ast":null,"code":"var _jsxFileName = \"D:\\\\javae\\\\ChatBot_Frontend\\\\chatbot-frontend\\\\src\\\\ActionProvider.js\";\nimport Message from './components/Message/Message';\nimport axios from 'axios';\nimport AuthContext from \"./auth-context\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ActionProvider extends Component {\n  constructor(createChatBotMessage, setStateFunc) {\n    super();\n\n    this.handleJavascriptList = () => {\n      const message = this.createChatBotMessage(\"Fantastic, I've got the following resources for you on Javascript:\", {\n        widget: \"javascriptLinks\"\n      });\n      console.log(typeof message);\n      console.log(message);\n      this.updateChatbotState(message);\n    };\n\n    this.handleSpringbootList = () => {\n      const message = this.createChatBotMessage(\"Fantastic, I've got the following resources for you on Springboot\", {\n        widget: \"SpringbootLinks\"\n      });\n      this.updateChatbotState(message);\n    };\n\n    this.fetchApiMessage = message2 => {\n      // this.setState((state) => {\n      //   return { message3: message2} });\n      this.setState({\n        message3: message2\n      }); //const [message1, setmessage1] = useState(message2);\n\n      var m = [];\n      axios.get('http://127.0.0.1:5000/chat?query=' + message2).then(response => {\n        return response;\n      }).then(data => {\n        const items = data;\n        console.log(\"##############\");\n        console.log(typeof items.data);\n        console.log(items.data);\n        m = items.data;\n        console.log(\"*************\");\n        console.log(m); //debugger;\n        //const message= this.createChatBotMessage(m[\"Similar Contents\"][0]+m[\"Similar Contents\"][1]+m[\"Similar Contents\"][2]);\n\n        const message = this.createChatBotMessage(m[\"BestAnswer\"], {\n          widget: \"Message\"\n        });\n\n        /*#__PURE__*/\n        _jsxDEV(AuthContext.Provider, {\n          value: {\n            message1: this.state.message3\n          },\n          children: /*#__PURE__*/_jsxDEV(Message, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 7\n        }, this);\n\n        this.updateChatbotState(message);\n        console.log(\"&&&&&&&&&&&&&&&&&&&&&&&&&&&&\");\n        console.log(typeof m);\n      });\n    };\n\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n    this.state = {\n      message3: null\n    };\n  } // new method\n\n\n  greet() {\n    const greetingMessage = this.createChatBotMessage(\"Hi, friend.\");\n    this.updateChatbotState(greetingMessage);\n    console.log(greetingMessage);\n  }\n\n  ujjwalFunction() {\n    const ujjwalmsg = this.createChatBotMessage(\"asdkjfhkjasdgfkjgDFJS\");\n    this.updateChatbotState(ujjwalmsg);\n  }\n\n  //  fetchApiMessage=(message)=>\n  //  {\n  //   const response = await axios.get('http://127.0.0.1:5000/chat?message=who is matt asay?');\n  //   console.log(typeof(response));\n  //   console.log((response));\n  //  };\n  updateChatbotState(message) {\n    // NOTICE: This function is set in the constructor, and is passed in from the top level Chatbot component. The setState function here actually manipulates the top level state of the Chatbot, so it's important that we make sure that we preserve the previous state.\n    this.setState(prevState => ({ ...prevState,\n      messages: [...prevState.messages, message]\n    }));\n  }\n\n}\n\nexport default ActionProvider;","map":{"version":3,"sources":["D:/javae/ChatBot_Frontend/chatbot-frontend/src/ActionProvider.js"],"names":["Message","axios","AuthContext","React","Component","ActionProvider","constructor","createChatBotMessage","setStateFunc","handleJavascriptList","message","widget","console","log","updateChatbotState","handleSpringbootList","fetchApiMessage","message2","setState","message3","m","get","then","response","data","items","message1","state","greet","greetingMessage","ujjwalFunction","ujjwalmsg","prevState","messages"],"mappings":"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","sourcesContent":["\r\nimport Message from './components/Message/Message';\r\nimport axios from 'axios';\r\nimport AuthContext from \"./auth-context\";\r\nimport React, { Component } from \"react\";\r\nclass ActionProvider extends Component{\r\n    constructor(createChatBotMessage, setStateFunc) {\r\n      super();\r\n      this.createChatBotMessage = createChatBotMessage;\r\n      this.setState = setStateFunc;\r\n      this.state = { message3:null };\r\n    }\r\n\r\n    // new method\r\n    greet() {\r\n      const greetingMessage = this.createChatBotMessage(\"Hi, friend.\");\r\n      this.updateChatbotState(greetingMessage);\r\n      console.log(greetingMessage);\r\n    }\r\n\r\n    ujjwalFunction()\r\n    {\r\n      const ujjwalmsg=this.createChatBotMessage(\"asdkjfhkjasdgfkjgDFJS\");\r\n      this.updateChatbotState(ujjwalmsg);\r\n    }\r\n  \r\n    handleJavascriptList = () => {\r\n      const message = this.createChatBotMessage(\r\n        \"Fantastic, I've got the following resources for you on Javascript:\",\r\n        {\r\n          widget: \"javascriptLinks\",\r\n        }\r\n      );\r\n      console.log(typeof(message));\r\n      console.log((message));\r\n      this.updateChatbotState(message);\r\n    }\r\n\r\n    handleSpringbootList = () => {\r\n      const message=this.createChatBotMessage(\r\n        \"Fantastic, I've got the following resources for you on Springboot\",\r\n        {\r\n          widget:\"SpringbootLinks\",\r\n        }\r\n      );\r\n\r\n      this.updateChatbotState(message);\r\n    };\r\n\r\n    fetchApiMessage=(message2)=>\r\n   {\r\n    // this.setState((state) => {\r\n    //   return { message3: message2} });\r\n\r\n      this.setState({message3:message2});\r\n    //const [message1, setmessage1] = useState(message2);\r\n      var m=[];\r\n       axios.get('http://127.0.0.1:5000/chat?query='+message2)\r\n        .then((response)=>{ return  response })\r\n        .then((data)=> {\r\n            const items = data;\r\n            console.log(\"##############\");\r\n            console.log(typeof((items.data)) )\r\n            console.log(((items.data)) )\r\n            m=(items.data);\r\n            console.log(\"*************\");\r\n            console.log(m);\r\n            //debugger;\r\n            //const message= this.createChatBotMessage(m[\"Similar Contents\"][0]+m[\"Similar Contents\"][1]+m[\"Similar Contents\"][2]);\r\n            const message=this.createChatBotMessage(\r\n              m[\"BestAnswer\"],\r\n              {\r\n                widget:\"Message\",\r\n              });\r\n\r\n      <AuthContext.Provider value={{ message1:this.state.message3}}>\r\n        <Message />\r\n      </AuthContext.Provider>\r\n\r\n           this.updateChatbotState(message);\r\n           console.log(\"&&&&&&&&&&&&&&&&&&&&&&&&&&&&\");\r\n           console.log(typeof(m));\r\n            \r\n          })\r\n   };\r\n  //  fetchApiMessage=(message)=>\r\n  //  {\r\n\r\n  //   const response = await axios.get('http://127.0.0.1:5000/chat?message=who is matt asay?');\r\n\r\n  //   console.log(typeof(response));\r\n  //   console.log((response));\r\n  //  };\r\n   \r\n\r\n\r\n    updateChatbotState(message) {\r\n      // NOTICE: This function is set in the constructor, and is passed in from the top level Chatbot component. The setState function here actually manipulates the top level state of the Chatbot, so it's important that we make sure that we preserve the previous state.\r\n  \r\n      this.setState((prevState) => ({\r\n        ...prevState,\r\n        messages: [...prevState.messages, message],\r\n      }));\r\n    }\r\n  }\r\n  \r\n  export default ActionProvider;"]},"metadata":{},"sourceType":"module"}